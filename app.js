const venom = require("venom-bot");
const axios = require('axios');
const banco = require('./src/banco');
const { parse, isWeekend } = require('date-fns');



const treinamento = `Voc√™ √© um atendente e est√° tirando d√∫vidas do cliente.
Voc√™ realiza um atendimento humanizado, imitando o comportamento humano. Lembre-se, voc√™ N√ÉO √â UMA I.A.
N√£o pergunte: "posso te ajudar com mais alguma coisa?" o tempo todo

Caso algu√©m venha com uma pergunta especifica ou reclam√ß√£o, passar o contato do gerente!

sempre d√™ as boas vindas: Ol√°, bem-vindo a Fazenda Park Nova Conquista!

As mensagens precisam ser resumidas! Os textos n√£o podem ser grandes!

mande emoji apenas a cada 3 mensagens que voc√™ envia!

jamais corrija a pessoa na maneira de escrever.

Voc√™ pode falar sobre o card√°pio!!! Fale que tem e que vai mandar o card√°pio

Voc√™ n√£o pode dar nenhuma informa√ß√£o de quaisquer coisas que n√£o est√£o relacionadas ao parque, exceto o card√°pio e redes sociais! 
Nunca mande a mensagem: "Desculpe, mas s√≥ posso enviar o card√°pio ap√≥s voc√™ fazer alguma perguntas relacionada ao parque. Como posso te ajudar?"; Ao inves disso fale que tem card√°pio

Caso ja tenha dado as boas-vindas, n√£o repita!

A seguir vou passar algumas perguntas comuns e respostas que voc√™ deve se basear:  

descri√ß√£o do local:

O parque tem 4 piscinas, tem 1 campo, tem tobog√£, espa√ßo para tirar fotos, espa√ßo para tirar fotos com animais, tem espa√ßo com animais, como papagaio, tirolesa, tem parquinho para crian√ßas com balan√ßo¬¥
√â um ambiente familiar, aberto

O nome do dono do parque √© Jeferson e o gerente √© Junior

Nosso instagram: @fazendaparknovaconquista, link do instagram: https://www.instagram.com/fazendaparknovaconquista?igsh=MXpkNmJiOTYxMHdw

A nossa reinaugura√ß√£o vai ocorrer no dia 11 de outubro, por conta de uma manunten√ß√£o e amplia√ß√£o do espa√ßo.

Ainda n√£o temos planos, fique por dentro que em breve vamos ter novidades!


`

const respostasPredefinidas = [
    { pergunta: /oi|ola|bom dia|boa tarde|boa noite|opa|ol√°/i, resposta: "Ol√°, bem-vindo a Fazenda Park Nova Conquista! Como posso te ajudar hoje? üòä" },
    { pergunta: /funcionamento|hor√°rio|dias/i, resposta: "O parque funciona de 09:00 da manh√£ at√© 17:00 da tarde, s√°bado e domingo." },
    { pergunta: /vit√≥ria|da conquista|vitoria da conquista|de conquista/i, resposta: "Ol√°! O parque fica a 4h e 38 min da cidade de Vit√≥ria da Conquista. Estamos localizados a 15 km de Itamaraty, sentido Gandu, na BR 101. A entrada fica √† esquerda, tem um ponto de √¥nibus e 2 placas grandes do parque na entrada. Posso ajudar em mais alguma coisa?" },
    { pergunta: /pre√ßo|valor|entrada|custa/i, resposta: "Pagando a entrada de 30 reais voc√™ tem acesso a todas as piscinas, campo, tobog√£, espa√ßo para fotos, espa√ßo com animais, parquinho para crian√ßas, e muito mais! üèä‚Äç‚ôÇÔ∏èüå≥" },
    { pergunta: /crian√ßas pagam/i, resposta: "Crian√ßas acima de 3 anos pagam 30 reais. At√© 3 anos, a entrada √© gratuita." },
    { pergunta: /obrigado|obrigada/i, resposta: "Agradecemos por utilizar nossos servi√ßos! Esperamos por voc√™ em breve!" },
    { pergunta: /desconto|grupos|grupo/i, resposta: "Desconto √© apenas para grupos! Para mais detalhes, entre em contato com o gerente no n√∫mero: 7399037182." },
    { pergunta: /comidas|bebidas/i, resposta: "N√£o √© permitido entrar com bebidas, caixas de som ou alimentos de fora." },
    { pergunta: /anivers√°rio/i, resposta: "Pode comemorar anivers√°rio! √â permitido levar bolo e ornamenta√ß√£o, mas doces e salgados n√£o." },
    { pergunta: /excurs√£o|excurs√µes/i, resposta: "Sim, aceitamos excurs√µes! Para agendar, √© necess√°rio consultar as datas e a quantidade de pessoas. Entre em contato com o gerente no n√∫mero: 7399037182." },
    { pergunta: /almo√ßo|comida|refei√ß√µes|caf√© da manh√£|caf√©/i, resposta: "Temos restaurante com op√ß√µes de buffet e √† la carte. Digitando a palavra CARD√ÅPIO, voc√™ poder√° ver o nosso card√°pio digital." },
    { pergunta: /pagamento|formas de pagamento|cart√£o|pix/i, resposta: "Aceitamos pagamentos em cart√£o, Pix ou dinheiro. O pagamento √© feito apenas de forma presencial." },
    { pergunta: /caixinha de som|m√∫sica|som/i, resposta: "N√£o √© permitido entrar com caixas de som ou qualquer outro dispositivo de som no parque." },
    { pergunta: /carro|transporte|√¥nibus|hor√°rio de transporte/i, resposta: "O parque n√£o oferece servi√ßo de transporte ou carro para levar os visitantes. Recomendamos verificar op√ß√µes de transporte particulares ou √¥nibus da regi√£o." },
    { pergunta: /estadia|dormir|acomoda√ß√£o|hospedagem/i, resposta: "O parque n√£o oferece acomoda√ß√µes para estadia. A cidade mais pr√≥xima com op√ß√µes de hospedagem √© Itamarati, recomendamos procurar por l√°." },
    { pergunta: /professor|desconto para professor/i, resposta: "N√£o, n√£o oferecemos descontos para professores." },
    { pergunta: /localiza√ß√£o|onde fica|aonde fica|fica em que lugar|qual a localidade/i, resposta: "Ol√°! Estamos localizados a 15 km de Itamaraty, sentido Gandu, na BR 101. A entrada fica √† esquerda, tem um ponto de √¥nibus e 2 placas grandes do parque na entrada. Tamb√©m estamos a 25 km de Gandu, sentido Itamaraty. A entrada fica a 800 metros depois da Fazenda Paineiras, na BR 101, √† direita, com as mesmas 2 placas do parque. Voc√™ tem mais alguma d√∫vida? üòä" },
    // Adicione mais perguntas e respostas conforme necess√°rio
];

const verificarDataFinalDeSemana = (mensagem) => {
    const regexData = /\b(\d{1,2})\s+de\s+(janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)\b/i;
    const meses = {
        janeiro: 0, fevereiro: 1, mar√ßo: 2, abril: 3, maio: 4, junho: 5,
        julho: 6, agosto: 7, setembro: 8, outubro: 9, novembro: 10, dezembro: 11
    };

    const match = mensagem.match(regexData);

    if (match) {
        const dia = parseInt(match[1]);
        const mes = meses[match[2].toLowerCase()];
        const anoAtual = new Date().getFullYear();

        // Converte a data da mensagem em um objeto Date
        const data = new Date(anoAtual, mes, dia);

        // Verifica se a data √© um final de semana (s√°bado ou domingo)
        if (isWeekend(data)) {
            return 'O parque vai abrir nessa data, pois cai em um final de semana! üòä';
        } else {
            return 'O parque n√£o abre durante a semana. Estamos abertos apenas aos s√°bados e domingos.';
        }
    }
    
    return null;
};


const verificarRespostaPredefinida = (mensagem) => {
    const mensagemMin = mensagem.toLowerCase();

    const respostaData = verificarDataFinalDeSemana(mensagem);
    if (respostaData) return respostaData;

    // Percorre a lista de respostas predefinidas
    for (const item of respostasPredefinidas) {
        if (item.pergunta.test(mensagemMin)) {
            return item.resposta;  // Retorna a primeira correspond√™ncia encontrada
        }
    }

    return null;  // Retorna null se nenhuma correspond√™ncia for encontrada
};


    // Percorre a lista de respostas predefinidas
    for (const item of respostasPredefinidas) {
        if (item.pergunta.test(mensagemMin)) {
            return item.resposta;  // Retorna a primeira correspond√™ncia encontrada
        }
    }

    return null;  // Retorna null se nenhuma correspond√™ncia for encontrada


let dailyTokenLimit = 333333; // Limite di√°rio de tokens
let usedTokensToday = 0; // Contagem de tokens usados hoje

venom.create ({
    session: "chatGPT_BOT",
    multidevice: true,
})
.then((client) => start(client))
.catch((err) => console.log(err));

const header = {
    "Content-Type": "application/json",
    "Authorization": "Bearer sk-svcacct-_2I-KeutmUGMK8jRxJS4_Yn-RwEl-Anlokda9IC3qcJ28ucIrV5JAp5NIpNYa892XYEmMyT3BlbkFJJJKvwAWr6u1aRsac1H_z2kI_nRm4n3p0HsVc9qfh180z0bKzem6gZtOT8qUtYrwsi0bZ0A" 
}

const start = (client) => {
    client.onMessage((message) => {
        const userCadastrado = banco.db.find(numero => numero.num === message.from);
        if(!userCadastrado){
            console.log("Cadastrando usuario");
            banco.db.push({num: message.from, historico : []});
        }
        else{
            console.log("usuario ja cadastrado");
        }

        const respostaPredefinida = verificarRespostaPredefinida(message.body);
if (respostaPredefinida) {
    console.log('Enviando resposta predefinida:', respostaPredefinida);
    client.sendText(message.from, respostaPredefinida)
        .then((result) => {
            console.log('Resposta predefinida enviada com sucesso:', result);
        })
        .catch((error) => {
            console.error('Erro ao enviar a resposta predefinida:', error);
        });
    return;  // Interrompe o fluxo para evitar chamar a API
}

                // 1. Verifica√ß√£o de "localiza√ß√£o"
        if (message.body.toLowerCase().includes('localiza√ß√£o') || message.body.toLowerCase().includes('endere√ßo')) {
            // Envia a localiza√ß√£o usando coordenadas (latitude e longitude)
            client.sendLocation(message.from, '-13.9303110', '-39.4992540', 'Fazenda Park Nova Conquista')
            .then((result) => {
                console.log('Localiza√ß√£o enviada com sucesso:', result);
            })
            .catch((error) => {
                console.error('Erro ao enviar a localiza√ß√£o:', error);
            });
            return;
        }

        // 2. Verifica√ß√£o de "card√°pio"
        if (message.body.toLowerCase().includes('card√°pio') || message.body.toLowerCase().includes('cardapio')) {
            // Envia as duas imagens do card√°pio, sem enviar mensagem de texto adicional
            Promise.all([
                client.sendImage(
                    message.from,
                    './images/cardapio1.jpeg',
                    'Card√°pio 1', 
                    ''  // N√£o enviar legenda
                ),
                client.sendImage(
                    message.from,
                    './images/cardapio2.jpeg',
                    'Card√°pio 2', 
                    ''  // N√£o enviar legenda
                )
            ])
            .then((result) => {
                console.log('Imagens do card√°pio enviadas com sucesso:', result);
            })
            .catch((error) => {
                console.error('Erro ao enviar imagens do card√°pio:', error);
            });

            return;
        }


        const historico = banco.db.find(num => num.num === message.from);
        historico.historico.push("user: " + message.body);
        console.log(historico.historico);

        console.log(banco.db);
        axios.post("https://api.openai.com/v1/chat/completions", {
            "model": "gpt-3.5-turbo",
            "messages": [

                {"role": "system", "content": treinamento},
                {"role": "system", "content": "historico de conversas: " + historico.historico},
                {"role": "user", "content": message.body}
            
            ],

            "max_tokens": 50 
            
           }, {
              headers: header
            })
                .then((response) => {
               console.log(response.data.choices[0].message.content);
               historico.historico.push("assistent: " + response.data.choices[0].message.content);
               client.sendText(message.from, response.data.choices[0].message.content);
            })
                .catch((err) => {
            if (err.response) {
                console.error("Erro ao chamar a API da OpenAI:", err.response.data, "Status:", err.response.status);
            } else {
                console.error("Erro desconhecido:", err);
            }
       });

    })
}